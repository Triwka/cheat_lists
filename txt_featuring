{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Triwka/cheat_lists/blob/main/txt_featuring\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a3bdd5e1",
      "metadata": {
        "id": "a3bdd5e1"
      },
      "outputs": [],
      "source": [
        "Токенизация\n",
        "ямыарфу\n",
        "ям\n",
        "ямы\n",
        "я\n",
        "мы\n",
        "арфу"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "45a62d56",
      "metadata": {
        "id": "45a62d56"
      },
      "outputs": [],
      "source": [
        "Стемминг и Лемматизация\n",
        "поехала - поехал\n",
        "пачек - пач\n",
        "собак - соб\n",
        "вами - вам - вампир в поиске\n",
        "впиться - вопьемся\n",
        "сделали - сделал\n",
        "поменяли - поменял\n",
        "книга\n",
        "книги\n",
        "книге\n",
        "Он был напуган громким воем(может быть глаголом или существительным)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9144a65b",
      "metadata": {
        "scrolled": false,
        "id": "9144a65b",
        "outputId": "10b05880-856e-4abf-ac25-eef19d0206b8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pymystem3 in /Users/19113157/opt/anaconda3/lib/python3.9/site-packages (0.2.0)\n",
            "Requirement already satisfied: requests in /Users/19113157/opt/anaconda3/lib/python3.9/site-packages (from pymystem3) (2.27.1)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /Users/19113157/opt/anaconda3/lib/python3.9/site-packages (from requests->pymystem3) (1.26.9)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /Users/19113157/opt/anaconda3/lib/python3.9/site-packages (from requests->pymystem3) (3.3)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /Users/19113157/opt/anaconda3/lib/python3.9/site-packages (from requests->pymystem3) (2.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /Users/19113157/opt/anaconda3/lib/python3.9/site-packages (from requests->pymystem3) (2021.10.8)\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "!pip install pymystem3\n",
        "from pymystem3 import Mystem\n",
        "import nltk\n",
        "from datetime import datetime\n",
        "import re\n",
        "df_data = pd.read_csv('fs_union_nakop_kp.csv', sep = \";\")\n",
        "data_test = pd.read_csv('data_test.csv', sep = \";\")\n",
        "stopwords = open('stop-ru.txt', 'r').read().split('\\n')\n",
        "stemmer = Mystem()\n",
        "\n",
        "#функция для замены назначенных дат и времени на дата/время\n",
        "def data_validate(string):\n",
        "    string = string.split(' ')\n",
        "    string_pars = ''\n",
        "    for token in string:\n",
        "            try:\n",
        "                 string_pars +=' '+(re.sub(r'(\\d{2})\\.(\\d{2})\\.(\\d{0,4})', r'дата\\время', token))\n",
        "            except ValueError:\n",
        "                 string_pars +=' '+token\n",
        "    return string_pars\n",
        "#функция для удаления символов пунктуации и цифр\n",
        "def del_puncdigit(string):\n",
        "    return ' '.join((re.sub(r'[№\"\\'_/.:?!\\d()%<>;,+#$&\\s+]', u' ', string)).split())\n",
        "#функция для удаления стоп-слов\n",
        "def del_stopwords(string):\n",
        "    return ' '.join([word for word in (re.sub(r'[()\\s+]', u' ', string)).split() if word not in stopwords])\n",
        "#функция для удаления повторов \"иноформация из обращения: \"\n",
        "def del_inform(string):\n",
        "    return ' '.join((re.sub(r'информация из обращения: ', u' ', string)).split())                  \n",
        "#лемматизация\n",
        "def lemmatize(string):\n",
        "    return ' '.join(stemmer.lemmatize(string)[::2])\n",
        "\n",
        "#удаление стоп-слов, ненужных символов и лемматизация\n",
        "def data_preproc(df_data):\n",
        "    df_data['ОПИСАНИЕ'] = df_data['ОПИСАНИЕ'].apply(lambda x: del_stopwords (del_puncdigit (data_validate (del_inform(x.lower())))))\n",
        "    df_data['ОПИСАНИЕ'] = df_data['ОПИСАНИЕ'].apply(lambda x: lemmatize(x))\n",
        "    return df_data\n",
        "df_data=data_preproc(df_data)\n",
        "data_test=data_preproc(data_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "699d815d",
      "metadata": {
        "scrolled": false,
        "id": "699d815d",
        "outputId": "df129cb0-19db-4ef0-c67b-49a08c23f704"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: razdel in /Users/19113157/opt/anaconda3/lib/python3.9/site-packages (0.5.0)\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.85      0.84       446\n",
            "           1       0.67      0.58      0.62       132\n",
            "           2       0.60      0.45      0.51       175\n",
            "           3       0.52      0.44      0.48        54\n",
            "           4       0.60      0.37      0.46       121\n",
            "           5       0.82      0.96      0.88       938\n",
            "           6       0.70      0.83      0.76       147\n",
            "           7       0.67      0.39      0.49        80\n",
            "           8       0.74      0.55      0.63       141\n",
            "           9       0.25      0.03      0.06        32\n",
            "          10       0.39      0.16      0.22        83\n",
            "          11       0.67      0.73      0.70       400\n",
            "          12       0.69      0.80      0.74       179\n",
            "\n",
            "    accuracy                           0.75      2928\n",
            "   macro avg       0.63      0.55      0.57      2928\n",
            "weighted avg       0.73      0.75      0.73      2928\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "train_descript = df_data['ОПИСАНИЕ']\n",
        "test_descript = data_test['ОПИСАНИЕ']\n",
        "train_category = df_data['КАТЕГОРИЯ']\n",
        "X_train, X_test, y_train, y_test = train_test_split(train_descript, train_category, test_size=0.3, random_state=42)\n",
        "%matplotlib inline\n",
        "\n",
        "import tqdm\n",
        "from sklearn.svm import LinearSVC\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "!pip install razdel\n",
        "import razdel\n",
        "\n",
        "def evaluate_vectorizer(vectorizer, train_descript, test_descript, train_category, test_category = None):\n",
        "    train_vectors = vectorizer.fit_transform(train_descript)\n",
        "    test_vectors = vectorizer.transform(test_descript)\n",
        "    \n",
        "    clf = LinearSVC(random_state=42)\n",
        "    \n",
        "    clf.fit(train_vectors, train_category)\n",
        "    \n",
        "    predictions = clf.predict(test_vectors)\n",
        "    if (test_category is not None):\n",
        "        print(classification_report(test_category, predictions))\n",
        "    \n",
        "    return predictions\n",
        "\n",
        "def tokenize_with_razdel(text):\n",
        "    tokens = [token.text for token in razdel.tokenize(text)]\n",
        "    \n",
        "    return tokens\n",
        "\n",
        "tfidf_vectorizer = TfidfVectorizer(min_df=2, tokenizer=lambda text: tokenize_with_razdel(text))\n",
        "predictions = evaluate_vectorizer(tfidf_vectorizer, train_descript, test_descript, train_category)\n",
        "test_predictions = evaluate_vectorizer(tfidf_vectorizer, X_train, X_test, y_train, y_test)\n",
        "data_test[\"КАТЕГОРИЯ\"] = predictions\n",
        "data_test[['ОПИСАНИЕ', \"КАТЕГОРИЯ\"]].to_csv('resolve.csv', index=None, encoding='utf-8-sig')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b211bb6e",
      "metadata": {
        "scrolled": true,
        "id": "b211bb6e",
        "outputId": "c771302d-21b9-450c-bc5e-6fbcb5389565"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "5     0.314698\n",
              "11    0.152063\n",
              "0     0.152063\n",
              "12    0.114251\n",
              "8     0.068916\n",
              "2     0.039642\n",
              "6     0.034357\n",
              "3     0.033747\n",
              "7     0.026835\n",
              "4     0.024192\n",
              "1     0.021143\n",
              "10    0.016670\n",
              "9     0.001423\n",
              "Name: КАТЕГОРИЯ, dtype: float64"
            ]
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data_test[\"КАТЕГОРИЯ\"].value_counts(normalize=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "59509dc8",
      "metadata": {
        "id": "59509dc8",
        "outputId": "c16b371f-ae2f-425f-abf0-59630761241d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ОПИСАНИЕ</th>\n",
              "      <th>КАТЕГОРИЯ</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>просить отменять выставлять цкп клиент спарк н...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>отработка потенциал искра нажатие кнопка откло...</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>информация знр протокол</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>просьба открывать сделка закрывать некорректны...</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>открывать потенциальный продажа доработка null...</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>удаваться поменять статус потенциальный продаж...</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>добрый атака высота предложение бизнес карта в...</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>вкладка атака высота некорректный отражаться у...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>добрый просить изменять исполнитель пп токарск...</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>потенциальный продажа связываться сделка откры...</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                            ОПИСАНИЕ  КАТЕГОРИЯ\n",
              "0  просить отменять выставлять цкп клиент спарк н...          1\n",
              "1  отработка потенциал искра нажатие кнопка откло...          8\n",
              "2                            информация знр протокол         11\n",
              "3  просьба открывать сделка закрывать некорректны...         12\n",
              "4  открывать потенциальный продажа доработка null...         12\n",
              "5  удаваться поменять статус потенциальный продаж...          8\n",
              "6  добрый атака высота предложение бизнес карта в...         12\n",
              "7  вкладка атака высота некорректный отражаться у...          2\n",
              "8  добрый просить изменять исполнитель пп токарск...         12\n",
              "9  потенциальный продажа связываться сделка откры...         10"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "resolve = pd.read_csv('resolve.csv', sep = \",\")\n",
        "resolve.head(10)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}